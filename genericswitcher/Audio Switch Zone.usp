#SYMBOL_NAME "Generic Audio Switch Zone"
#CATEGORY "46" "ATI"
#ENABLE_TRACE
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
  
#USER_SIMPLSHARP_LIBRARY "GenericAudioSwitchProcessor"
DIGITAL_INPUT
_skip_,
MuteFb;

ANALOG_INPUT
VolumeFb;

DIGITAL_OUTPUT
_skip_,
MuteOn,
MuteOff;

ANALOG_OUTPUT
Source,
Volume;

AudioSwitchZone zone;

INTEGER_PARAMETER ZoneNum;

#BEGIN_PARAMETER_PROPERTIES ZoneNum
	propValidUnits = unitDecimal;
	propDefaultUnit = unitDecimal;
	propBounds=1d, 32d;
	propDefaultValue = 1d;
    propShortDescription= "Value of switcher output.";
#END_PARAMETER_PROPERTIES

Change VolumeFb
{
	Trace("VolumeFb Change: Zone %d UpdateVol", ZoneNum);
 	zone.SendVolume();
}

Change MuteFb
{
	Trace("MuteFb Change: Zone %d UpdateMute",ZoneNum);
 	zone.SendMute();
}

Callback Function UpdateRoute(Integer route)
{
	Trace("Zone %d UpdateSource : %d",ZoneNum, route);
 	Source = route;
} 

Callback Function UpdateVol(Integer vol)
{
 	
	Trace("Zone %d UpdateVol : %d",ZoneNum, vol);
	Volume = vol;
}

Callback Function UpdateMute(Integer mute)
{
	Trace("Zone %d UpdateMute : %d",ZoneNum, mute);
	if(mute = 0 && MuteFb = 1)
	{
		pulse(50, MuteOff);
	}
	else if(mute = 1 && MuteFb = 0)
	{
		pulse(50, MuteOn);
	}
	
}

Callback Integer_Function UpdateVolFb()
{
	return (VolumeFb);
}

Callback Integer_Function UpdateMuteFb()
{
	return (MuteFb);
}


Function Main()
{
	WaitForInitializationComplete();

	zone.Initialize(ZoneNum);
	
	registerdelegate(zone, Route, UpdateRoute);
	registerdelegate(zone, Vol, UpdateVol);
	registerdelegate(zone, Mute, UpdateMute);
	registerdelegate(zone, VolFeedback, UpdateVolFb);
	registerdelegate(zone, MuteFeedback, UpdateMuteFb);

}

   